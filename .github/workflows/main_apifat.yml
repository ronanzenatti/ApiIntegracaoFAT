# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy ASP.Net Core app to Azure Web App - apifat

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'

      - name: Build with dotnet
        run: dotnet build --configuration Release

      - name: dotnet publish
        run: dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/myapp

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp
          retention-days: 1
          compression-level: 6

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    steps:
      # ==================================================================
      # ALTERA√á√ÉO 1: FAZER CHECKOUT DO C√ìDIGO FONTE
      # Adicionamos este passo para que o job tenha acesso √† estrutura de arquivos do projeto.
      - name: Checkout repository
        uses: actions/checkout@v4
      # ==================================================================

      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .net-app
          path: ./deployment
        timeout-minutes: 5

      # CORRE√á√ÉO: Verificar se o download funcionou
      - name: Verify artifact download
        run: |
          echo "üìÅ Conte√∫do do diret√≥rio deployment:"
          ls -la ./deployment/
          if [ -z "$(ls -A ./deployment/)" ]; then
            echo "‚ùå ERRO: Nenhum arquivo foi baixado!"
            exit 1
          fi
          echo "‚úÖ Artifact baixado com sucesso"
        
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_F06C8115B4764B4FB4B6AD28104D37BE }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_4501437E89344FE9BE8FB80C4A9DA5E0 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_16B262A420D745628D34D72E3B8001FA }}

      # CORRE√á√ÉO 3: Instalar .NET SDK novamente no job de deploy e usar caminho correto
      - name: Set up .NET Core for migrations
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'

       # DIAGN√ìSTICO: Testar conectividade com MySQL
      - name: Test MySQL Connectivity
        run: |
          echo "üîç Testando conectividade com MySQL Azure..."
          
          # Instalar mysql client
          sudo apt-get update
          sudo apt-get install -y mysql-client
          
          # Testar conex√£o b√°sica (sem senha para n√£o expor no log)
          echo "Testando se o servidor est√° acess√≠vel..."
          if timeout 10s mysql -h api-bd.mysql.database.azure.com -P 3306 -u api -p'P#ssw0rdr' --ssl-mode=REQUIRED -e "SELECT 1;" 2>/dev/null; then
            echo "‚úÖ Conex√£o MySQL funcionando"
          else
            echo "‚ùå Falha na conex√£o MySQL"
            echo "Testando conectividade b√°sica (ping)..."
            ping -c 3 api-bd.mysql.database.azure.com || echo "Ping falhou"
            
            echo "Testando porta 3306..."
            nc -zv api-bd.mysql.database.azure.com 3306 || echo "Porta 3306 n√£o acess√≠vel"
          fi

      # ==================================================================
      # Este passo foi adicionado para instalar as ferramentas do EF Core
      # e executar as migrations no banco de dados do Azure antes do deploy.
      # Utiliza um secret do reposit√≥rio para a string de conex√£o.
      - name: Run EF Core Migrations
        run: |
          echo "üîÑ Instalando EF Core tools..."
          dotnet tool install --global dotnet-ef
          
          echo "üìÅ Estrutura atual dos arquivos:"
          ls -la
          ls -la ./deployment/ || echo "Deployment n√£o encontrado"
          ls -la ApiIntegracao/ || echo "ApiIntegracao n√£o encontrado"
          
          echo "üîÑ Executando migrations..."
          
          # CORRE√á√ÉO: Usar o projeto do c√≥digo fonte (n√£o o deployment)
          # O EF precisa dos arquivos .cs e .csproj, n√£o apenas os bin√°rios
          dotnet ef database update \
            --project ApiIntegracao/ApiIntegracao.csproj \
            --startup-project ApiIntegracao/ApiIntegracao.csproj \
            --connection "server=api-bd.mysql.database.azure.com;port=3306;database=api_integracao;user=api;password=P#ssw0rdr;SslMode=Required;Connect Timeout=30;Command Timeout=60;AllowPublicKeyRetrieval=true;" \
            --verbose
          
          echo "‚úÖ Migrations executadas com sucesso"
      # FIM DA ALTERA√á√ÉO
      # ==================================================================

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'apifat'
          slot-name: 'Production'
          package: ./deployment

          


